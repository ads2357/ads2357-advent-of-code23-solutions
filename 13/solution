#!/usr/bin/env python3

import sys

part = 2

infilename = 'sample-input'
infile = open(infilename, 'r')

in_str = infile.read()

in_patterns = in_str.split('\n\n')

def pat_str_to_int(s):
    return (#int(
        ''.join(
            '1' if c == '#' else '0'
            for c in s
            if c in '#.'
        )
    )#)

def dist(sa, sb):
    return len([None for ca, cb in zip(sa, sb) if ca!=cb])

def check_mirror(row_or_col_list, repeat_index_lo):
    upfromidx = row_or_col_list[repeat_index_lo+1:]
    downfromidx = row_or_col_list[repeat_index_lo::-1]
    return all(u==d for u,d in zip(upfromidx, downfromidx))

def find_solution():

    pats = []
    row_numbers = []
    col_numbers = []

    for pat in in_patterns:
        rows = []
        repeat_idx_rows = []
        lines = pat.split('\n')
        for line in lines:
            if not line:
                continue
            rows.append(
                pat_str_to_int(line)
            )

        cols = []
        repeat_idx_cols = []
        for ii in range(len(lines[0])):
            str_col = [ li[ii] for li in lines if len(li) > ii]
            if not str_col:
                continue
            cols.append(pat_str_to_int(str_col))

        pats.append((rows, cols))
        #import pdb; pdb.set_trace()

        dist1_idx_rows = []
        dist1_idx_cols = []

        for ii in range(len(rows)-1):
            if rows[ii] == rows[ii+1]:
                repeat_idx_rows.append(ii)
            if dist(rows[ii], rows[ii+1]) == 1:
                dist1_idx_rows.append(ii)

        for ii in range(len(cols)-1):
            if cols[ii] == cols[ii+1]:
                repeat_idx_cols.append(ii)
            if dist(cols[ii], cols[ii+1]) == 1:
                dist1_idx_cols.append(ii)

        #import pdb; pdb.set_trace()
        if part == 1:
            #import pdb; pdb.set_trace()
            for rptidx in repeat_idx_rows:
                if check_mirror(rows, rptidx):

                # upfromidx = rows[rptidx+1:]
                # downfromidx = rows[rptidx::-1]
                # if all(u==d for u,d in zip(upfromidx, downfromidx)):
                #     #import pdb; pdb.set_trace()
                    print (rptidx)
                    row_numbers.append(rptidx+1)

            for rptidx in repeat_idx_cols:
                upfromidx = cols[rptidx+1:]
                downfromidx = cols[rptidx::-1]
                if all(u==d for u,d in zip(upfromidx, downfromidx)):
                    #import pdb; pdb.set_trace()
                    print (rptidx)
                    col_numbers.append(rptidx+1)

        else:
            for d1ridx in dist1_idx_rows:
                for ii in range(2):
                    new_rows = rows.copy()
                    new_rows[d1ridx + ii%2] = new_rows[d1ridx + (ii+1)%2 ]
                    if check_mirror(new_rows, d1ridx):
                        row_numbers.append(d1ridx)

            for d1ridx in dist1_idx_cols:
                for ii in range(2):
                    new_cols = cols.copy()
                    new_cols[d1ridx + ii%2] = new_cols[d1ridx + (ii+1)%2 ]
                    if check_mirror(new_cols, d1ridx):
                        col_numbers.append(d1ridx)


    print('sum=', sum(row_numbers) * 100 + sum(col_numbers))

