#!/usr/bin/env python3

import networkx as nx
import re
import matplotlib.pyplot as plt

#infilename = 'sample-input'
infilename = 'input'

with open(infilename, 'r') as f:
    lines = f.readlines()

RE_WIRINGLINE = re.compile(r'(?P<node>[a-z]+):(?P<others>(?: [a-z]+)+)')

graph = nx.Graph()

for line in lines:
    m = RE_WIRINGLINE.match(line)
    if m:
        node_id = m['node']
        graph.add_node(node_id)
        for o in m['others'].strip().split(' '):
            graph.add_node(o)
            graph.add_edge(node_id, o)


# Assume that the minimum cut is three edges.
assert nx.algorithms.edge_connectivity(graph) == 3

edges_to_remove = nx.algorithms.connectivity.minimum_edge_cut(graph)

# Sanity check that we found the three edges.
assert len(edges_to_remove) == 3

another_graph = nx.Graph()
another_graph.add_nodes_from(graph.nodes)
# reconstruct graph sans the removed edges. Coding of edges is
# directed even though graph is not, so convert edge tuples to sets,
# whose comparison is not affected by order.
another_graph.add_edges_from(e for e in graph.edges if set(e) not in (set(er) for er in edges_to_remove))

disconnected_graphs = list(nx.connected_components(another_graph))

# Sanity check that removing the edges actually produced a graph
# consisting of exactly two connected subgraphs. (I.e. no bugs in
# constructing it.)
assert len(disconnected_graphs) == 2

print(len(disconnected_graphs[0]) * len(disconnected_graphs[1]))
