#!/usr/bin/env python3

import sys
import re
import networkx as nx


## experiment - shared data references
# import networkx as nx
# >>> dg = nx.DiGraph()
# >>> dg.add_nodes([1,2])
# Traceback (most recent call last):
#   File "<stdin>", line 1, in <module>
# AttributeError: 'DiGraph' object has no attribute 'add_nodes'
# >>> dg.add_nodes_from([1,2])
# >>> dg
# <networkx.classes.digraph.DiGraph object at 0x7f71e4dabd60>
# >>> dg.nodes()
# NodeView((1, 2))
# >>> dg.nodes()[0]
# Traceback (most recent call last):
#   File "<stdin>", line 1, in <module>
#   File "/usr/lib/python3/dist-packages/networkx/classes/reportviews.py", line 178, in __getitem__
#     return self._nodes[n]
# KeyError: 0
# >>> dg.nodes()[1]
# {}
# >>> dg.nodes()[1]['list'] = []
# >>> dg.nodes()[2]['list'] = dg.nodes()[1]['list']
# >>> dg.nodes()[2]['list'].append('hello')
# >>> dg.nodes[1]
# {'list': ['hello']}
# >>> 



### Read in map to digraph

#def read_maze_to_digraph(lines):

infilename = 'input'
infilename = 'sample-input'
with open(infilename, 'r') as f:
    lines = f.readlines()

dg = nx.DiGraph()
first_line = lines[0]

start_node_id = 0
    

prev_line_nodes = 

