#!/usr/bin/env python3

import sys

PART=1
PART=2

ALL_CARDS='23456789TJQKA'

def card_to_ordering(c, part_arg=2):
    if PART == 1 or part_arg==1:
        FACECARDS = 'TJQKA'
        return ord(c) if c >= '2' and c <= '9' else ord('9')+1+FACECARDS.index(c)
    else:
        FACECARDS = 'TQKA'
        return 0 if c == 'J' else card_to_ordering(c, 1)

class Hand:
    ORDERING_TESTS = [
        lambda _self: Hand.isNOfAKind(_self, 5),
        lambda _self: Hand.isNOfAKind(_self, 4),
        lambda _self: Hand.isFullHouse(_self),
        lambda _self: Hand.isNOfAKind(_self, 3),
        lambda _self: Hand.isTwoPair(_self),
        lambda _self: Hand.isNOfAKind(_self, 2),
    ]

    def __init__(self, cards):
        self.cards = cards
        num_jokers = cards.count('J')
        card_and_card_counts = sorted([ (c, self.cards.count(c)) for c in set(self.cards) if c!='J' or PART==1],
                                      key=lambda c_cc: (c_cc[1],card_to_ordering(c_cc[0])), reverse=True)
        self.card_counts = [ cc for c, cc in card_and_card_counts ]
        if PART!=1:
            if len(self.card_counts):
                self.card_counts[0] += num_jokers # greedy algorithm, converting jokers to most valuable card
            else:
                self.card_counts.append(num_jokers)

    def isNOfAKind(self, n):
        return any(c == n for c in self.card_counts)

    def isFullHouse(self):
        return self.isNOfAKind(3) and self.isNOfAKind(2)

    def isFlush(self):
        raise NotImplementedError('Only one suit supported!')

    def isTwoPair(self):
        return len([None for c in self.card_counts if c==2]) == 2

    def getFirstCard(self):
        return self.cards[0]

    def __repr__(self):
        return str(self.cards)

    def __lt__(self, other):
        # it would have been better to implement a conversion from hand to integer, here.

        results = ( (t(self), t(other)) for t in self.__class__.ORDERING_TESTS )
        results = [ (t(self), t(other)) for t in self.__class__.ORDERING_TESTS ]

        # debug
        # import itertools
        # variants = []
        # cards_less_j = self.cards.replace('J','')
        # num_j = self.cards.count('J')
        # replacements = (''.join(tup) for tup in itertools.permutations(ALL_CARDS, num_j))
        # for r in replacements:
        #     h = Hand(cards_less_j + r)
        #     hr = [ t(h) for t in self.__class__.ORDERING_TESTS ]
        #     hs = [ t(self) for t in self.__class__.ORDERING_TESTS ]
        #     assert hr <= hs

        for (rs, ro) in results:
            if (rs or ro):
                if (rs==ro):
                    break # the tie
                else:
                    return ro

        for (cs, co) in zip(self.cards, other.cards):
            so, oo = ( card_to_ordering(c) for c in (cs, co) )
            if so != oo:
                return so < oo

        return False

def parse_hand(line):
    cards, bid = line.split()
    return (Hand(cards), int(bid))

if __name__ == "__main__" or True:
    infilename = 'sample-input' if len(sys.argv)<2 else sys.argv[1]
    with open(infilename, 'r') as infile:
        hand_bids = [ parse_hand(line) for line in infile ]

    sorted_hbs = sorted(hand_bids)
    print ('\n'.join(str(hb) for hb in sorted_hbs))

    total = sum(hb[1] * idx for idx, hb in enumerate(sorted_hbs, start=1))
    print (total)
